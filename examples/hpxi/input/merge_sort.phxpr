;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;   Copyright (c) 2011 Bryce Lelbach
;
;   Distributed under the Boost Software License, Version 1.0. (See accompanying
;   file BOOST_LICENSE_1_0.rst or copy at http://www.boost.org/LICENSE_1_0.txt)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(link hpx as px)

(import * from ports)
(import (let append reverse ceiling length) from r5rs-scheme)
(import (ldiff last-n) from common-lisp)
(import (cmdline) from platform)
(import (eager-future) from px)

(variable merge-lists
  (lambda (list-1 list-2)
    (let merge-it
      ((rest-1 list-1) (rest-2 list-2) (merged '()))
        (cond
          ((null? rest-1)
            (append (reverse merged) rest-2))
          ((null? rest-2)
            (append (reverse merged) rest-1))
          ((< (car rest-1) (car rest-2))
            (merge-it (cdr rest-1) rest-2 (cons (car rest-1) merged)))
        (else
          (merge-it rest-1 (cdr rest-2) (cons (car rest-2) merged)))))))

(variable small
  (lambda (list)
    (or (null? list) (null? (cdr list)))))

(variable right-half
  (lambda (list)
    (last-n list (ceiling (/ (length list) 2)))))

(variable left-half
  (lambda (list)
    (ldiff list (right-half list))))

(variable merge-sort
  (lambda (list)
    (if (small list)
      list
      (let ((left (eager-future left-half list))
            (right (eager-future right-half list)))
        (merge-lists (left) (right)))))) 

(variable test-merge-sort
  (lambda (list)
    (let ((r ((eager-future merge-sort list))))
      (display "merge-sort('")
      (display list)
      (display ") ==> ")
      (display r)
      (newline))))

; 'hpx_main' 
(assert (list? cmdline))

(test-merge-sort cmdline)

0 ; return 0 to the driver

