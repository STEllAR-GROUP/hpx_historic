;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;   Copyright (c) 2011 Bryce Lelbach
;
;   Distributed under the Boost Software License, Version 1.0. (See accompanying
;   file BOOST_LICENSE_1_0.rst or copy at http://www.boost.org/LICENSE_1_0.txt)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(link hpx as px)

(import * from ports)
(import (let) from r5rs-scheme)
(import (cmdline) from platform)
(import (eager-future) from px)

(variable fibonacci
  (lambda (n)
    (if (< n 2) n
      ; px:eager-future returns a 'future' procedure 
      (let ((n1 (eager-future fibonacci (- n 1)))
            (n2 (eager-future fibonacci (- n 2))))
        ; we wait on the 'future' procedures by invoking them 
        (+ (n1) (n2))))))  

(variable test-fibonacci
  (lambda (n)
    ; note that I invoke the future (a nullary procedure) in the binding
    ; expression - this causes the pxthread to wait for the result before
    ; executing the I/O code in the body of the let
    (let ((r ((eager-future fibonacci n))))
      (display "fibonacci(")
      (display n)
      (display ") ==> ")
      (display r)
      (newline))))

; 'hpx_main' - module level code, which is executed when this file is evaluated
(assert (number? cmdline))

(test-fibonacci cmdline)

0 ; return 0 to the driver

