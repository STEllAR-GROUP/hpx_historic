# Copyright (c) 2007-2009 Hartmut Kaiser
# Copyright (c) 2007-2008 Chirag Dekate
# Copyright (c) 2009 Lei Pan
# Copyright (c) 2009 Alex Nagelberg
#
# Distributed under the Boost Software License, Version 1.0. (See accompanying 
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

###################################################
#--Top Level CMakeList.txt for XPI
###################################################

# We require at least CMake V2.6.2
cmake_minimum_required(VERSION 2.6.2 FATAL_ERROR)
ENABLE_TESTING()
# allow more human readable "if then else" constructs
set(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS TRUE)

#--Create project name: xpi
#--${xpi_SOURCE_DIR} and ${xpi_BINARY_DIR} are auto generated by cmake.
project(xpi CXX C)

# project version
set(XPI_MAJOR_VERSION 0)
set(XPI_MINOR_VERSION 1)
set(XPI_PATCH_LEVEL   0)
set(XPI_VERSION "${XPI_MAJOR_VERSION}.${XPI_MINOR_VERSION}.${XPI_PATCH_LEVEL}")
set(XPI_SOVERSION ${XPI_MAJOR_VERSION})

# We have a patched BoostFIND module, and other files to include, look for 
# these in our misc directory
list(APPEND CMAKE_MODULE_PATH ${xpi_SOURCE_DIR}/misc)
list(REMOVE_DUPLICATES CMAKE_MODULE_PATH)

# include additional macro definitions
include(XpiUtils)

# set default cmake build type to RelWithDebInfo (None Debug Release RelWithDebInfo MinSizeRel)
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Debug")
endif()

include($ENV{HPX_ROOT}/share/cmake/Hpx.cmake)

include_directories(${Boost_INCLUDE_DIR})
link_directories(${Boost_LIBRARY_DIR})

# include several directories for header files
include_directories(${xpi_SOURCE_DIR})
include_directories(${xpi_SOURCE_DIR}/xpi)
include_directories(${xpi_SOURCE_DIR}/internal)

############# Add HPX path ###############
#--Get hpx src/bin dir from the argument
#SET(hpx_SOURCE_DIR ${HPX_SRC_ROOT})
#SET(hpx_BINARY_DIR ${HPX_BIN_ROOT})

#--include the hpx src dir
include_directories(${HPX_ROOT}/include)
include_directories(${HPX_ROOT}/include/hpx)
include_directories(${HPX_ROOT}/include/boost)
include_directories(${HPX_ROOT}/include/boost/cache)
include_directories(${HPX_ROOT}/include/boost/chrono)
include_directories(${HPX_ROOT}/include/boost/coroutine)
include_directories(${HPX_ROOT}/include/boost/endian)
if(${Boost_MINOR_VERSION} LESS 36)
    include_directories(${HPX_ROOT}/external/exception)
endif()
include_directories(${HPX_ROOT}/include/boost/logging)
include_directories(${HPX_ROOT}/include/boost/lockfree)
include_directories(${HPX_ROOT}/include/boost/plugin)

##--Link to hpx bin
find_library(HPX_LIB hpx ${HPX_ROOT}/lib)
find_library(HPX_SERIALIZATION_LIB hpx_serialization ${HPX_ROOT}/lib)

##--Link libraries
set (xpi_LIBRARIES ${Boost_LIBRARIES} ${HPX_LIB} ${HPX_SERIALIZATION_LIB})
if(UNIX)
    set(xpi_LIBRARIES ${xpi_LIBRARIES} dl)
endif()
link_libraries(${xpi_LIBRARIES})

#-------------Add Xpi Directories and Libraries-----------------
include_directories (${xpi_SOURCE_DIR}/src)
include_directories (${xpi_SOURCE_DIR}/xpi)
include_directories (${xpi_SOURCE_DIR}/xpi)

# initialize installation directory (can be changed via ccmake or 
# 'cmake -DCMAKE_PREFIX=...')
if(UNIX)
    SET(CMAKE_PREFIX "/usr/lib" 
        CACHE PATH "Prefix prepended to install directories")
else()
    SET(CMAKE_PREFIX "C:/Program Files/xpi" 
        CACHE PATH "Prefix prepended to install directories")
endif()

# force some variables that could be defined in the command line to be written 
# to cache
set(CMAKE_INSTALL_PREFIX "${CMAKE_PREFIX}" 
    CACHE PATH "Where to install ${PROJECT_NAME}" 
    FORCE)
mark_as_advanced(CMAKE_INSTALL_PREFIX)
set(CMAKE_BUILD_TYPE "${CMAKE_BUILD_TYPE}" 
    CACHE STRING "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel." 
    FORCE)
set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}" 
    CACHE PATH "Path to custom CMake Modules" 
    FORCE)

message(STATUS "XPI will be installed to: " ${CMAKE_INSTALL_PREFIX})

# global library configuration
add_definitions(-DXPI_PREFIX=\"${CMAKE_INSTALL_PREFIX}\")
add_definitions(-DXPI_USE_LOCKFREE=1)
add_definitions(-DXPI_USE_TBB=0)

# the Boost serialization library needs to be linked as a shared library
add_definitions(-DBOOST_SERIALIZATION_DYN_LINK)
add_definitions(-DBOOST_ARCHIVE_DYN_LINK)

# all other Boost libraries don't need to be loaded as shared libraries (but 
# it's easier configuration wise to do so)
add_definitions(-DBOOST_FILESYSTEM_DYN_LINK)
add_definitions(-DBOOST_DATE_TIME_DYN_LINK)
add_definitions(-DBOOST_PROGRAM_OPTIONS_DYN_LINK)
add_definitions(-DBOOST_REGEX_DYN_LINK)
add_definitions(-DBOOST_SYSTEM_DYN_LINK)
add_definitions(-DBOOST_SIGNALS_DYN_LINK)
add_definitions(-DBOOST_THREAD_DYN_DLL)

if(MSVC)
    add_definitions(-D_WINDOWS)
    add_definitions(-DBOOST_USE_WINDOWS_H)
    add_definitions(-D_WIN32_WINNT=0x0501)
    add_definitions(-D_SCL_SECURE_NO_WARNINGS)
    add_definitions(-D_CRT_SECURE_NO_WARNINGS)
    add_definitions(-D_SCL_SECURE_NO_DEPRECATE)
    add_definitions(-D_CRT_SECURE_NO_DEPRECATE)
    add_definitions(-D_CRT_NONSTDC_NO_WARNINGS)
    # suppress certain warnings
    add_definitions(-wd4251 -wd4231 -wd4275 -wd4660 -wd4094 -wd4267 -wd4180)
    if(CMAKE_CL_64)
        add_definitions(-DBOOST_COROUTINE_USE_FIBERS)
    endif()
endif()


if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    add_definitions(-D_XOPEN_SOURCE=1)
endif()

if(CMAKE_COMPILER_IS_GNUCXX)
    add_definitions(-DXPI_GCC_HAVE_VISIBILITY)
endif()

# set(xpi_LIBRARIES xpi xpi_serialization)
# if(UNIX)
#     set(xpi_LIBRARIES ${xpi_LIBRARIES} dl)
# endif()

# set variable helping in naming the target library names
if(MSVC)
    set(CMAKE_DEBUG_POSTFIX "d")
endif()
if(UNIX)
    set(component_LIBRARY_PREFIX "hpx_component_")
endif()

##########################################

# Recurse into subdirectories. This does not actually
# cause another cmake executable to run. The same process will walk through
# the project's entire directory structure.
add_subdirectory (src)
#add_subdirectory (tests)
#add_subdirectory (demo)

# installation instructions
install(
    DIRECTORY xpi/                    # install all hpx header files
    DESTINATION include/xpi 
    FILES_MATCHING PATTERN "*.h"      #-- .h for C users
    REGEX ".svn" EXCLUDE
    REGEX "CMakeFiles" EXCLUDE)

# install(
#     DIRECTORY src
#     DESTINATION include 
#     FILES_MATCHING PATTERN "*.hpp"
#     REGEX ".svn" EXCLUDE
#     REGEX "CMakeFiles" EXCLUDE)


# export build settings
#include(CMakeExportBuildSettings)
#cmake_export_build_settings("${PROJECT_NAME}BuildSettings.cmake")

# export library dependencies (keep this as the last line in the file)
#export_library_dependencies("${PROJECT_NAME}LibDeps.cmake")

#--Enable CTest
#include(CTest)
#enable_testing()

